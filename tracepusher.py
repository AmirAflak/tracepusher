import sys
import requests
import time
import secrets

# This script is very simple. It does the equivalent of:
# curl -i -X POST http(s)://otel_collector_url/v1/traces \
# -H "Content-Type: application/json" \
# -d @trace.json

#############################################################################
# USAGE
# python tracepusher.py http(s)://localhost:4318 service-name-A spanX 2
#############################################################################

def print_help_text():
   print("Random trace and span IDs are automatically generated by this tool")
   print("Usage: python tracepusher.py http(s)://<OTEL-COLLECTOR-ENDPOINT-AND-PORT> <SERVICE_NAME> <SPAN_NAME> <SPAN_TIME_IN_SECONDS>")
   print("eg. python tracepusher.py http://localhost:4318 tracepusher my-span 2")

# MANDATORY PARAMETERS
# If someone needs help
if (len(sys.argv) == 2):
   param = sys.argv[1]
   if (str.lower(param) == "-h" or str.lower(param) == "--help"):
      print_help_text()
      exit(0)
elif len(sys.argv) < 5:
  print("Mandatory parameters not provided.")
  print_help_text()
  exit(0)

# Debug mode required?
DEBUG_MODE = False
if "-d" in sys.argv or "--debug" in sys.argv:
   print("> Debug mode is ON")
   DEBUG_MODE = True

DRY_RUN = False
if "--dry" in sys.argv or "--dry-run" in sys.argv:
   print("> Dry run mode is ON. Nothing will actually be sent.")
   DRY_RUN = True

otel_collector_url = sys.argv[1]
service_name = sys.argv[2]
span_name = sys.argv[3]
trace_length_seconds = int(sys.argv[4])

# Generate random chars for trace and span IDs
# of 32 chars and 16 chars respectively
# per secrets documentation
# each byte is converted to two hex digits
# hence this "appears" wrong by half but isn't
trace_id = secrets.token_hex(16)
span_id = secrets.token_hex(8)

if DEBUG_MODE:
  print(f"Trace ID: {trace_id}")
  print(f"Span ID: {span_id}")

# get time now
time_now = time.time_ns()
# calculate future time by adding that many seconds
time_future = time_now + (trace_length_seconds * 1000000000)

if DEBUG_MODE:
   print(f"Time now: {time_now}")
   print(f"Time future: {time_future}")

trace = {
 "resourceSpans": [
   {
     "resource": {
       "attributes": [
         {
           "key": "service.name",
           "value": {
             "stringValue": service_name
           }
         }
       ]
     },
     "scopeSpans": [
       {
         "scope": {
           "name": "manual-test"
         },
         "spans": [
           {
             "traceId": trace_id,
             "spanId": span_id,
             "name": span_name,
             "kind": "SPAN_KIND_INTERNAL",
             "start_time_unix_nano": time_now,
             "end_time_unix_nano": time_future,
             "droppedAttributesCount": 0,
             "events": [],
             "droppedEventsCount": 0,
             "status": {
               "code": 1
             }
           }
         ]
       }
     ]
   }
 ]
}

if DEBUG_MODE:
   print("Trace:")
   print(trace)

if DRY_RUN:
   print(f"Collector URL: {otel_collector_url}. Service Name: {service_name}. Span Name: {span_name}. Trace Length (seconds): {trace_length_seconds}")
   print("Trace:")
   print(trace)
if not DRY_RUN:
  resp = requests.post(f"{otel_collector_url}/v1/traces", headers={ "Content-Type": "application/json" }, json=trace)
  print(resp)
